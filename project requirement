AS A social media startup
I WANT an API for my social network that uses a NoSQL database
SO THAT my website can handle large amounts of unstructured data

GIVEN a social network API
THEN my server is started and the Mongoose models are synced to the MongoDB database
WHEN I enter the command to invoke the application
WHEN I open API GET routes in Insomnia for users and thoughts
THEN the data for each of these routes is displayed in a formatted JSON
WHEN I test API POST, PUT, and DELETE routes in Insomnia
THEN I am able to successfully create, update, and delete users and thoughts in my database
WHEN I test API POST and DELETE routes in Insomnia
THEN I am able to successfully create and delete reactions to thoughts and add and remove friends to a user’s friend list


Mock-Up

The following animations show examples of the application's API routes being tested in Insomnia.

The following animation shows GET routes to return all users and all thoughts being tested in Insomnia:

Demo of GET routes to return all users and all thoughts being tested in Insomnia.

The following animation shows GET routes to return a single user and a single thought being tested in Insomnia:

Demo that shows GET routes to return a single user and a single thought being tested in Insomnia.

# POST, PUT, and DELETE routes for users being tested in Insomnia:

POST, PUT, and DELETE routes for users being tested in Insomnia.

POST, PUT, and DELETE routes for thoughts being tested in Insomnia.

# POST and DELETE routes for a user’s friend list being tested in Insomnia:

POST and DELETE routes for a user’s friend list being tested in Insomnia.

POST and DELETE routes for reactions to thoughts being tested in Insomnia.

Getting Started

Use the following guidelines to set up your models and API routes:

MODELS


# User

1- username

String
Unique
Required
Trimmed

2- email

String
Required
Unique
Must match a valid email address (look into Mongoose's matching validation)

3- thoughts

Array of _id values referencing the Thought model
friends

Array of _id values referencing the User model (self-reference)

# SCHEMA SETTINGS

Create a virtual called friendCount that retrieves the length of the user's friends array field on query.

# Thought

1- thoughtText

String
Required
Must be between 1 and 280 characters
createdAt
Date
Set default value to the current timestamp
Use a getter method to format the timestamp on query

2- username (The user that created this thought)

String
Required


3- reactions (These are like replies)

Array of nested documents created with the reactionSchema

# SCHEMA SETTINGS

Create a virtual called reactionCount that retrieves the length of the thought's reactions array field on query.

# Reaction (SCHEMA ONLY) NOT A MODEL

1- reactionId

Use Mongoose's ObjectId data type
Default value is set to a new ObjectId


2- reactionBody

String
Required
280 character maximum


3- username

String
Required
createdAt

4 -Date

Set default value to the current timestamp
Use a getter method to format the timestamp on query


# SCHEMA SETTINGS

This will not be a model, but rather will be used as the reaction field's subdocument schema in the Thought model.


# API Routes

## /api/users

1- GET all users

2- GET a single user by its _id and populated thought and friend data

3- POST a new user:

// example data
{
  "username": "lernantino",
  "email": "lernantino@gmail.com"
}
4- PUT to update a user by its _id

5- DELETE to remove user by its _id

BONUS: Remove a user's associated thoughts when deleted.

## /api/users/:userId/friends/:friendId

1- POST to add a new friend to a user's friend list

2- DELETE to remove a friend from a user's friend list

## /api/thoughts

1- GET to get all thoughts

2- GET to get a single thought by its _id

3- POST to create a new thought (don't forget to push the created thought's _id to the associated user's thoughts array field)

// example data
{
  "thoughtText": "Here's a cool thought...",
  "username": "lernantino",
  "userId": "5edff358a0fcb779aa7b118b"
}
4- PUT to update a thought by its _id

5- DELETE to remove a thought by its _id

## /api/thoughts/:thoughtId/reactions

1- POST to create a reaction stored in a single thought's reactions array field

2- DELETE to pull and remove a reaction by the reaction's reactionId value

Grading Requirements
This Challenge is graded based on the following criteria:

Deliverables: 10%
Your GitHub repository containing your application code.
Walkthrough Video: 37%
A walkthrough video that demonstrates the functionality of the social media API must be submitted, and a link to the video should be included in your README file.

The walkthrough video must show all of the technical acceptance criteria being met.

The walkthrough video must demonstrate how to start the application’s server.

The walkthrough video must demonstrate GET routes for all users and all thoughts being tested in Insomnia.

The walkthrough video must demonstrate GET routes for a single user and a single thought being tested in Insomnia.

The walkthrough video must demonstrate POST, PUT, and DELETE routes for users and thoughts being tested in Insomnia.

Walkthrough video must demonstrate POST and DELETE routes for a user’s friend list being tested in Insomnia.

Walkthrough video must demonstrate POST and DELETE routes for reactions to thoughts being tested in Insomnia.

Technical Acceptance Criteria: 40%
Satisfies all of the preceding acceptance criteria plus the following:

Uses the Mongoose package (Links to an external site.) to connect to a MongoDB database.

Includes User and Thought models outlined in the Challenge instructions.

Includes schema settings for User and Thought models as outlined in the Challenge instructions.

Includes Reactions as the reaction field's subdocument schema in the Thought model.

Uses functionality to format queried timestamps properly.

Repository Quality: 13%
Repository has a unique name.

Repository follows best practices for file structure and naming conventions.

Repository follows best practices for class/id naming conventions, indentation, quality comments, etc.

Repository contains multiple descriptive commit messages.

Repository contains a high-quality README with description and a link to a walkthrough video.

Bonus: +10 Points
Application deletes a user's associated thoughts when the user is deleted.
How to Submit the Challenge
You are required to submit BOTH of the following for review:

A walkthrough video demonstrating the functionality of the application and all of the acceptance criteria being met.

The URL of the GitHub repository. Give the repository a unique name and include a README describing the project.

NOTE
You are allowed to miss up to two Challenge assignments and still earn your certificate. If you complete all Challenge assignments, your lowest two grades will be dropped. If you wish to skip this assignment, you may move on to the next module.

Comments are disabled for graded submissions in BootCamp Spot. If you have questions about your feedback, please notify your instructional staff or the Student Success Manager. If you would like to resubmit your work for an improved grade, you can use the Resubmit Assignment button to upload new links. You may resubmit up to three times for a total of four submissions.

© 2020 - 2022 Trilogy Education Services, a 2U, Inc. brand. All Rights Reserved.

# In MongoDB, the methods for adding data to a collection are .insertOne() or .insertMany(). 
# But in Mongoose, we use the .create() method, which will actually handle either one or multiple inserts!